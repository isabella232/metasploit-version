# Releasing

These steps can be added to the Pull Request description's task list to remind the reviewer of how to release the
gem.

```
# Release

Complete these steps on DESTINATION

## `VERSION`

<%- if options[:major] < 1 -%>
### Compatible changes

If your changes are compatible with the previous branch's API, then increment [`PATCH`](<%= version_path %>).

### Incompatible changes

If your changes are incompatible with the previous branch's API you can either (1) decide to remain pre-1.0.0 or (2)
advance to 1.0.0.

1. To remain pre-1..0.0, then increment [`MINOR`](<%= version_path %>) and reset [`PATCH`](<%= version_path %>) to `0`.
2. To advance to 1.0.0, increment [`MAJOR`](<%= version_path %>) and reset [`MINOR`](<%= version_path %> and [`PATCH`](<%= version_path %>) to `0`.
<%- else -%>
### Bug fixes

If your changes involve bug fixes, but don't affect the public API, then increment [`PATCH`](<%= version_path %>).

### Compatible API changes

If your changes involves widening of the API, such as adding new option parameters or adding new methods, then increment
[`MINOR`](<%= version_path %>) and reset [`PATCH`](<%= version_path %>) to `0`.

### Incompatible API changes

If your changes involve shrinking the API, such as dropping positional arguments from methods, removing methods or
making arguments stricter, then increment [`MAJOR`](<%= version_path %>) and reset [`MINOR`](<%= version_path %> and
[`PATCH`](<%= version_path %>) to `0`.
<%- end -%>

- [ ] Following the rules for [semantic versioning 2.0](http://semver.org/spec/v2.0.0.html), update [`MINOR`](<%= version_path %>) and [`PATCH`](<%= version_path %>) and commit the changes.
<%- options[:ruby_versions].each do |ruby_version| -%>

## <%= ruby_version %>
- [ ] `rvm use <%= ruby_version %>@<%= name %>`
- [ ] `rm Gemfile.lock`
- [ ] `bundle install`
- [ ] `rake release`
<%- end -%>
```

### Downstream dependencies

There are currently no known downstream dependencies
